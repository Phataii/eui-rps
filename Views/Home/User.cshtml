@model UsersVM
@{
    ViewData["Title"] = "Users";
}

</style>
<div class="app-wrapper">
    <div class="app-content">
        <!-- Body main section starts -->
        <main>
           <div class="container">
                <h1>User Management</h1>

                <!-- Add User Button -->
                <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addUserModal">
                    Add New User
                </button>
                
                <!-- User List Table -->
                <table class="table table-bordered" id="userTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Department</th>
                            <th>Is Active</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            <tr>
                                <td>@user.Name</td>
                                <td>@user.Email</td>
                                <td>@user.DepartmentName</td>
                                <td>@(user.IsActive ==true ? "Yes" : "No")</td>
                                <td>
                                    <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#editUserModal" 
                                            data-id="@user.Id" data-name="@user.Name" data-email="@user.Email">
                                        Edit
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Add User Modal -->
            <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                       <form id="userForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <select class="form-select select2" id="name" name="name" required>
                                    <option selected disabled value="">Choose...</option>
                                    @foreach (var staff in Model.Staff)
                                    {
                                        <option value="@staff.Id" 
                                                data-email="@staff.SchoolEmail"
                                                data-department="@staff.DepartmentName"
                                                data-departmentId="@staff.DepartmentId"
                                                data-faculty="@staff.FacultyId">
                                            @staff.Fullname
                                        </option>
                                    }
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required readonly>
                            </div>

                            <div class="mb-3">
                                <label for="department" class="form-label">Department</label>
                                <input type="text" class="form-control" id="department" name="department" required readonly>
                                <input type="text" class="form-control" id="departmentId" name="departmentId" hidden required readonly>
                            </div>
                            <div class="mb-3">
                                @* <label for="faculty" class="form-label">Faculty</label> *@
                                <input type="text" class="form-control" id="faculty" name="faculty" hidden required readonly>
                            </div>

                            <button type="submit" class="btn btn-primary">Save</button>
                        </form>

                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit User Modal -->
            <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editUserForm">
                                <input type="hidden" id="editUserId" name="Id">
                                <div class="mb-3">
                                    <label for="user" class="form-label">User</label>
                                    <input type="text" class="form-control" id="user" disabled name="user" required>
                                </div>
                                <div class="mb-3">
                                    <label for="editUserDpt" class="form-label">Department</label>
                                    <select class="form-select" id="editUserDpt" name="editUserDpt" required>
                                        <option selected disabled value="">Choose...</option>
                                        @foreach (var department in Model.Departments)
                                        {
                                            <option value="@department.Id" 
                                                    data-name="@department.Name">
                                                    @department.Name
                                            </option>
                                        }
                                    </select>
                                    @* <input type="email" class="form-control" id="editUserDpt" name="Email" required> *@
                                </div>
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    <!-- Body main section ends -->
</div>
<!-- Load jQuery before Select2 -->
<!-- CSS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />

<!-- JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<!-- Add these to your head -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">

<!-- After jQuery -->
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
<!-- Initialize -->
<script>
    $('#name').select2({
        theme: 'bootstrap-5',
        placeholder: "Search staff...",
        width: '100%', // Fix for Bootstrap 5
        dropdownParent: $('#addUserModal') // Point to your modal's ID
    });
</script>


<!-- Initialize -->
<script>
$(document).ready(function() {
  $('#userTable').DataTable({
    responsive: true,
    searching: true // Enable search
  });
});
</script>
   <script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById('userForm');

        form.addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent default form submission

            const nameSelect = document.getElementById('name');
            const emailInput = document.getElementById('email');
            const departmentInput = document.getElementById('department');
            const departmentIdInput = document.getElementById('departmentId');
            const facultyInput = document.getElementById('faculty');

            // Ensure a name is selected
            if (!nameSelect.value) {
                alert("Please select a user.");
                return;
            }

            // Prepare the data to send
            const userData = {
                id: nameSelect.value, // Sending ID instead of name value
                name: nameSelect.options[nameSelect.selectedIndex].text,
                email: emailInput.value,
                department: departmentInput.value,
                departmentId: departmentIdInput.value,
                facultyId: facultyInput.value
            };

            try {
                const response = await fetch('/api/auth/add-user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(userData)
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to create user');
                }

                alert(result.message || 'User created successfully!');
                window.location.reload();
            } catch (error) {
                alert('Error: ' + error.message);
            }
        });

        // Populate form fields when selecting a user
        document.getElementById('name').addEventListener('change', function () {
            const selectedOption = this.options[this.selectedIndex];
        
            document.getElementById('email').value = selectedOption.getAttribute('data-email') || "";
            document.getElementById('department').value = selectedOption.getAttribute('data-department') || "";
            document.getElementById('departmentId').value = selectedOption.getAttribute('data-departmentId') || "";
            document.getElementById('faculty').value = selectedOption.getAttribute('data-faculty') || "";
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
    // Select all edit buttons
    const editButtons = document.querySelectorAll("[data-bs-target='#editUserModal']");

    editButtons.forEach(button => {
        button.addEventListener("click", function () {
            // Get user data from button attributes
            const userId = this.getAttribute("data-id");
            const userName = this.getAttribute("data-name");
            const userEmail = this.getAttribute("data-email");

            // Populate modal form fields
            document.getElementById("editUserId").value = userId;
            document.getElementById("user").value = userName;
            document.getElementById("editUserEmail").value = userEmail;
        });
    });
});
</script>

@* Edit user department *@
<script>
  document.getElementById('editUserForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const id = document.getElementById('editUserId').value;
    const selectElement = document.getElementById('editUserDpt');
    const departmentId = selectElement.value;

    // Get the selected option and extract data-name
    const selectedOption = selectElement.options[selectElement.selectedIndex];
    const departmentName = selectedOption.getAttribute('data-name');

    if (!id || !departmentId || !departmentName) {
      alert('Please fill out all required fields.');
      return;
    }

    const data = { id, departmentId, departmentName };

    try {
      const response = await fetch(`/api/auth/update-user`, {
        method: 'POST', // or PATCH depending on your API
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        throw new Error('Failed to update user.');
      }

      const result = await response.json();
      alert('User updated successfully.');
      // Optionally, reload or redirect
    location.reload();
    } catch (error) {
      console.error(error);
      alert('An error occurred while updating the user.');
    }
  });
</script>
