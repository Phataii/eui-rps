@model IEnumerable<rps.Models.Result>
@{
    ViewData["Title"] = "Course Clean Sheet";
    var userRole = Context.Request.Cookies["UserRole"];
}

<div class="app-wrapper">
    <div class="app-content">
        <!-- Body main section starts -->
            <main>
                <!-- Add Departments Form start -->
                <div class="container-fluid">
                    <!-- ready to use table start -->
                    <div class="row">
                        <!-- student list tabel 2-->

                      <div class="col-10 mx-auto" id="printableCard">
                            <div class="card">
                                <div class="card-body">
                                     <img src="assets/images/logo/logo.png" width="100" style="margin-left: 45%;" alt="#">
                                    <div class="container mx-auto text-center border-b-2 pb-4">
                                        <h4 class="text-lg font-semibold">EDO UNIVERSITY IYAMHO</h4>
                                        <h5 class="text-md font-medium">FACULTY OF ________________________________</h5>
                                        <h5 class="text-md font-medium">DEPARTMENT OF @ViewBag.dpt</h5>
                                        <h5 class="text-lg font-bold mt-2">EXAMINATION SCORE SHEET</h5>
                                        <h6 class="text-md font-medium">@ViewBag.session Session</h6>
                                        
                                        <div class="mt-4 text-sm">
                                            <p><strong>Course Code:</strong> @ViewBag.course &nbsp; | &nbsp; <strong>Course Title:</strong> _______________________________________</p>
                                            <p><strong>Department:</strong> @ViewBag.dpt &nbsp; | &nbsp; <strong>Level:</strong> @ViewBag.level &nbsp; | &nbsp; <strong>Credit Units:</strong> ____</p>
                                            <p><strong>Total Number of Students:</strong> @ViewBag.count &nbsp; | &nbsp; <strong>Examination Date:</strong> _____________</p>
                                        </div>
                                    </div>

                                   @{
                                        var serialNumber = 1;

                                        // Create a dictionary to count grades
                                        var gradeCounts = new Dictionary<string, int>();

                                        // Initialize expected grades
                                        var possibleGrades = new List<string> { "A", "B", "C", "D", "E", "F" };
                                        foreach (var grade in possibleGrades)
                                        {
                                            gradeCounts[grade] = 0;
                                        }

                                        // Count grades from the model
                                        foreach (var result in Model)
                                        {
                                            if (gradeCounts.ContainsKey(result.Grade))
                                            {
                                                gradeCounts[result.Grade]++;
                                            }
                                            else
                                            {
                                                // If there's an unexpected grade, you can either ignore or add it
                                                gradeCounts[result.Grade] = 1;
                                            }
                                        }

                                        int totalStudents = gradeCounts.Values.Sum();
                                        int failedStudents = gradeCounts.ContainsKey("F") ? gradeCounts["F"] : 0;
                                        int passedStudents = totalStudents - failedStudents;
                                    }
                                    @{
                                        int totalNoStudents = Model.Count();
                                        double? totalScores = Model.Sum(result => result.Total);
                                        double averageScore = totalStudents > 0 ? (double)totalScores / totalStudents : 0;
                                    }
                                    <div class="app-scroll table-responsive app-datatable-default">
                                        <table class="w-100 display student-list-table table table-bordered align-middle">
                                            <thead>
                                                <tr>
                                                    <th>#</th>
                                                    <th>Matric No.</th>
                                                    <th>Student Name</th>
                                                    <th>CA(30)</th>
                                                    <th>Exam(70)</th>
                                                    <th>Total(100)</th>
                                                    <th>Grade</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var result in Model)
                                                {
                                                    <tr>
                                                        <td>@serialNumber</td>
                                                        <td>@result.StudentId</td>
                                                        <td>@result.StudentName</td>
                                                        <td>@(@result.CA + @result.Upgrade)</td>
                                                        <td>@result.Exam</td>
                                                        <td>@result.Total</td>
                                                        <td>@result.Grade</td>
                                                    </tr>
                                                    serialNumber++;
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    @{
                                        var groupedResults = Model
                                            .GroupBy(r => r.Grade)
                                            .Select(g => new {
                                                Grade = g.Key,
                                                StudentCount = g.Count(),
                                                TotalScore = g.Sum(r => r.Total)
                                            })
                                            .OrderBy(g => g.Grade)
                                            .ToList();

                                        var grades = string.Join(",", groupedResults.Select(g => $"'{g.Grade}'"));
                                        var studentCounts = string.Join(",", groupedResults.Select(g => g.StudentCount));
                                    }
                                    <div>
                                        
                                    </div>
                                    <canvas id="gradeChart" width="400" height="200" class="mx-auto mt-8"></canvas>
       
                                    <table class="border-collapse border border-gray-800 text-sm mx-auto mt-4">
                                        <thead>
                                            <tr class="bg-gray-200">
                                                <th class="border border-gray-800 px-4 py-2">Details</th>
                                                @foreach (var grade in possibleGrades)
                                                {
                                                    <th class="border border-gray-800 px-4 py-2 text-center">@grade</th>
                                                }
                                                <th class="border border-gray-800 px-4 py-2 text-center font-bold">Grand Total</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td class="border px-4 py-1 font-bold">No. of Students</td>
                                                @foreach (var grade in possibleGrades)
                                                {
                                                    var count = gradeCounts.ContainsKey(grade) ? gradeCounts[grade] : 0;
                                                    <td class="border px-4 py-1 text-center">@count</td>
                                                }
                                                <td class="border px-4 py-1 text-center font-bold">@totalStudents</td>
                                            </tr>
                                            <tr>
                                                <td class="border px-4 py-1 font-bold">% No. of Students</td>
                                                @foreach (var grade in possibleGrades)
                                                {
                                                    var count = gradeCounts.ContainsKey(grade) ? gradeCounts[grade] : 0;
                                                    var percentage = totalStudents > 0 ? (count * 100.0 / totalStudents).ToString("0.00") : "0.00";
                                                    <td class="border px-4 py-1 text-center">@percentage%</td>
                                                }
                                                <td class="border px-4 py-1 text-center font-bold">100.00%</td>
                                            </tr>
                                        </tbody>
                                    </table>


                                    <div class="" style="margin-top: 50px; margin-bottom: 20px;">
                                        <p>Total Number of Students: @totalStudents </p>
                                        <p>Total Number of Students that passed: @passedStudents </p>
                                        <p>Total Number of Students that failed: @failedStudents </p>
                                        <p>Average Score: @averageScore.ToString("0.00") </p>
                                    </div>
                                   <div class="footer text-center" style="margin-top: 50px; margin-bottom: 20px;">
                                    <!-- Signature Upload -->
                                    <input type="file" accept="image/*" id="signatureUpload" class="mb-4" onchange="previewSignature(this)">
                                    
                                    <!-- Signature Preview -->
                                    <div id="signaturePreview" class="mx-auto mt-28 cursor-pointer" onclick="triggerUpload()" style="min-height: 60px;">
                                        ______________________________________
                                    </div>

                                    <!-- Lecturer Name -->
                                    <p class="font-semibold mt-2">@ViewBag.lecturer</p>
                                </div>
                                </div>
                            </div>
                        </div>

                        <!-- Print Button -->
                        <div class="text-center mt-4">
                            <button onclick="printCard()" class="px-4 py-2 bg-secondary text-white rounded-md">Print</button>
                        </div>
                    
                        <div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="modalLabel">Upgrade @ViewBag.course for this student</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <form action="/api/result/upgradeSingleResult" method="post">
                                            <input type="text" class="form-control" id="resultId" name="id" hidden readonly>
                                            <input type="text" class="form-control" value="@ViewBag.course" id="course" name="course" hidden readonly>
                                            <input type="text" class="form-control" id="uploader" name="uploader" hidden readonly>
                                            <div class="mb-3">
                                                <label for="studentName" class="form-label">Mat. No.</label>
                                                <input type="text" class="form-control" id="studentName" name="studentId" readonly>
                                            </div>
                                            <div class="mb-3">
                                                <label for="score" class="form-label">Score</label>
                                                <input type="text" class="form-control" id="score" name="score" placeholder="Score to upgrade with">
                                            </div>
                                            
                                            <button type="submit" class="btn btn-primary">Submit</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- ready to use table end -->
                </div>
            </main>
        <!-- Body main section ends -->
    </div>
</div>

<!--customizer-->
<div id="customizer"></div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Listen for the modal trigger button click
        $('a[data-bs-target="#myModal"]').on('click', function () {
            // Get the student name from the data attribute
            var studentName = $(this).data('student-name');
             var resultId = $(this).data('result-id'); // this is the row id in the result table
             var uploader = $(this).data('uploader');
            // Update the modal's input field with the student name
            $('#studentName').val(studentName);
            $('#resultId').val(resultId);
            $('#uploader').val(uploader);
        });
    });
</script>
 <!-- JavaScript for Printing -->
<script>
    function printCard() {
        var content = document.getElementById("printableCard").innerHTML;
        var originalContent = document.body.innerHTML;
        
        document.body.innerHTML = content; // Replace the entire body with only the printable content
        window.print(); // Trigger print dialog
        document.body.innerHTML = originalContent; // Restore original content
        location.reload(); // Reload page to restore JavaScript functionality
    }
</script>

 <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('gradeChart').getContext('2d');
    const gradeChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw(grades)], // Grades on X-axis
            datasets: [{
                label: 'No. of Students',
                data: [@Html.Raw(studentCounts)], // No. of students on Y-axis
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'No. of Students'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Grade'
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: 'Grade Distribution'
                }
            }
        }
    });
</script>

<script>
    function previewSignature(input) {
        const preview = document.getElementById('signaturePreview');
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function (e) {
                // Hide the file input
                input.style.display = "none";

                // Set preview image
                preview.innerHTML = `<img src="${e.target.result}" alt="Signature" style="max-height: 60px; margin-top: -40px;" />`;
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    function triggerUpload() {
        const input = document.getElementById('signatureUpload');
        input.click();
    }
</script>